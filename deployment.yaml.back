# pv
{{- if .Values.persistentvolume.create }}
kind: PersistentVolume
apiVersion: v1
metadata:
  name: {{ include "harvester.fullname" . }}
  labels:
      {{- include "harvester.labels" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  capacity:
    storage: {{ .Values.persistentvolume.size }}
  accessModes:
    - ReadWriteMany
  hostPath:
    path: {{ .Values.persistentvolume.path }}
---
{{- end }}
# pv claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "harvester.fullname" . }}
  labels:
    {{- include "harvester.labels" . | nindent 4 }}
spec:
  storageClassName: {{ .Values.persistentvolume.class }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.persistentvolume.size }}
  {{- if .Values.persistentvolume.selector }}
  selector:
    matchLabels:
      {{- include "harvester.selectorLabels" . | nindent 6 }}
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "harvester.fullname" . }}
  labels:
    {{- include "harvester.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "harvester.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "harvester.selectorLabels" . | nindent 8 }}
    spec:
      hostname:  {{ .Release.Name }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "harvester.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- if .Values.noRoot }}
            # set non-zero GUID to run conder with non-root PID
            runAsGroup: 15678
            {{- if .Values.securityContext }}
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
            {{- else }}
            {{- toYaml .Values.securityContext | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.autoStart }}
          command: ["/bin/sh", "-c"]
          args:
            - while ! mysqladmin ping -h ${HARVESTER_DB_HOST} -p${MARIADB_PASSWORD} --silent; do sleep 1; done;
              cp /opt/harvester/sandbox/init-harvester /data/harvester/;
              chmod +x /data/harvester/init-harvester;
              cp /opt/harvester/sandbox/run-harvester-crons /data/harvester/;
              chmod +x /data/harvester/run-harvester-crons;
              mkdir -p /opt/harvester/etc/queue_config;
              chmod 777 /opt/harvester/etc/queue_config;
              cp /opt/harvester/sandbox/* /data/harvester/;
              chmod 777 /data;
              bash /opt/harvester/sandbox/dev-harvester;
              cp /opt/harvester/sandbox/setup-harvester /data/harvester/;
              printf '#!/bin/bash\n source /data/harvester/setup-harvester\n /opt/harvester/etc/rc.d/init.d/run-harvester-services;' > /data/harvester/run-harvester-new;
              chmod a+x /data/harvester/run-harvester-new;
              {{- if .Values.noRoot }}
              /opt/harvester/etc/rc.d/init.d/run-harvester-services;
              {{- else }}
              chmod -R 777 /var/log/panda;

              # runuser -u atlpan -g zp -- /opt/harvester/etc/rc.d/init.d/run-harvester-services;
              runuser -u atlpan -g zp -- /data/harvester/run-harvester-new;
              {{- end }}
              sleep infinity & wait
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: {{ include "harvester.fullname" . }}-logs
              mountPath: /var/log/panda/
            - name: {{ include "harvester.fullname" . }}-configjson
              mountPath: /opt/harvester/etc/configmap
            - name: {{ include "harvester.fullname" . }}-queueconfig
              mountPath: /opt/harvester/etc/queue_config_mount
            - name: {{ include "harvester.fullname" . }}-sandbox
              mountPath: /opt/harvester/sandbox
            - name: {{ include "harvester.fullname" . }}-certs
              mountPath: /opt/harvester/etc/cert
            - name: {{ include "harvester.fullname" . }}-auth
              mountPath: /opt/harvester/etc/auth
          envFrom:
            - configMapRef:
                name: {{ include "harvester.fullname" . }}-env
            - secretRef:
                name: {{ .Values.global.secret }}-harvester-envs
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ include "harvester.fullname" . }}-logs
          persistentVolumeClaim:
            claimName: {{ include "harvester.fullname" . }}
        - name: {{ include "harvester.fullname" . }}-configjson
          configMap:
            name: {{ include "harvester.fullname" . }}-configjson
        - name: {{ include "harvester.fullname" . }}-queueconfig
          configMap:
            name: {{ include "harvester.fullname" . }}-queueconfig
        - name: {{ include "harvester.fullname" . }}-sandbox
          configMap:
            name: {{ include "harvester.fullname" . }}-sandbox
        - name: {{ include "harvester.fullname" . }}-certs
          secret:
              secretName: {{ .Values.global.secret }}-harvester-certs
        - name: {{ include "harvester.fullname" . }}-auth
          secret:
              secretName: {{ .Values.global.secret }}-harvester-auth
