-- Generated by Ora2Pg, the Oracle database Schema converter, version 21.1
-- Copyright 2000-2020 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:INT8R

SET client_encoding TO 'UTF8';

SET search_path = doma_pandabigmon,public;
\set ON_ERROR_STOP ON

SET check_function_bodies = false;



CREATE OR REPLACE FUNCTION doma_pandabigmon.geths06ssummary (CONDITION text) RETURNS HS06SSUMMARY_T AS $body$
DECLARE

coll HS06SSUMMARY_T;
sqlstatement varchar(32767);

BEGIN

sqlstatement := '
select doma_pandabigmon.HS06S_T(h.nucleus, h.COMPUTINGSITE, h.usedhs06spersite, h.failedhs06spersite) 
from (
select nucleus, COMPUTINGSITE, 
sum(usedhs06spertask) as usedhs06spersite, 
sum(failedhs06spertask) as failedhs06spersite 
from (
select jj.nucleus, jj.COMPUTINGSITE,  (ceil(sum(hs06perjob)*1.5*max(hs06perjob)/avg(hs06perjob))) as usedhs06spertask,
case when jobstatus=''failed'' then (ceil(sum(hs06perjob)*1.5*max(hs06perjob)/avg(hs06perjob))) end  as failedhs06spertask 
from (
select jt.NUCLEUS, jt.COMPUTINGSITE, jt.jobstatus, ((jt.jobduration-ts.BASEWALLTIME)*jt.sitecoef*ts.CPUEFFICIENCY/100) as hs06perjob from (
(select t.NUCLEUS, t.COMPUTINGSITE, t.JEDITASKID, t.jobstatus, (t.ENDTIME-t.STARTTIME)*24*60*60 as jobduration, case when s.corecount is null then s.COREPOWER else (s.CORECOUNT*s.COREPOWER) end as sitecoef  from 
doma_panda.JOBSARCHIVED4 t 
INNER JOIN 
doma_pandameta.SCHEDCONFIG s 
ON t.COMPUTINGSITE=s.SITEID
where t.MODIFICATIONTIME>=(sysdate-3) and t.CLOUD=''WORLD'' and t.JOBSTATUS in (''finished'',''failed'') and '|| CONDITION ||'
)) jt 
INNER JOIN
doma_panda.JEDI_TASKS ts 
ON ts.JEDITASKID = jt.JEDITASKID
) jj
where hs06perjob>0
group by jj.COMPUTINGSITE, jj.jobstatus, jj.nucleus
) 
group by COMPUTINGSITE, nucleus
order by nucleus) h';

EXECUTE sqlstatement BULK COLLECT INTO STRICT coll;
RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION geths06ssummary (CONDITION text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.geths06ssummary (CONDITION text) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.geths06stotsummary (CONDITION text) RETURNS HS06STOTSUMMARY_T AS $body$
DECLARE

coll HS06STOTSUMMARY_T;
sqlstatement varchar(32767);

BEGIN

sqlstatement := '
select doma_pandabigmon.HS06STOT_T(h.nucleus, h.ntaskspernucleus, h.toths06spernucleus) 
from (
select nucleus, COUNT(t.jeditaskid) as ntaskspernucleus, sum(t.cputime*d.nevents) as toths06spernucleus from 
doma_panda.JEDI_TASKS t 
INNER JOIN 
doma_panda.JEDI_DATASETS d 
ON t.JEDITASKID = d.JEDITASKID
where  d.TYPE in (''input'', ''pseudo_input'') and d.MASTERID is null and t.CLOUD=''WORLD'' and t.MODIFICATIONTIME>=(sysdate-3) and nucleus is not null and '|| CONDITION ||' 
group by nucleus
order by nucleus) h';


EXECUTE sqlstatement BULK COLLECT INTO STRICT coll;
RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION geths06stotsummary (CONDITION text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.geths06stotsummary (CONDITION text) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.getjobslist_dev31 (CONDITION text, MAXROWSTABLE integer) RETURNS JOBSTABLE_T AS $body$
DECLARE

l_res_coll JOBSTABLE_T;
sqlstatement varchar(32767);

BEGIN

sqlstatement := '

  SELECT doma_pandabigmon.JOB_T(t0.PANDAID, t0.JOBDEFINITIONID, t0.SCHEDULERID, t0.PILOTID, t0.CREATIONTIME, t0.CREATIONHOST, t0.MODIFICATIONTIME, t0.MODIFICATIONHOST, t0.ATLASRELEASE, 
  t0.TRANSFORMATION, t0.HOMEPACKAGE, t0.PRODSERIESLABEL, t0.PRODSOURCELABEL, t0.PRODUSERID, t0.ASSIGNEDPRIORITY, t0.CURRENTPRIORITY, t0.ATTEMPTNR, t0.MAXATTEMPT, t0.JOBSTATUS, t0.JOBNAME, t0.MAXCPUCOUNT, t0.MAXCPUUNIT,
  t0.MAXDISKCOUNT, t0.MAXDISKUNIT, t0.IPCONNECTIVITY, t0.MINRAMCOUNT, t0.MINRAMUNIT, t0.STARTTIME, t0.ENDTIME, t0.CPUCONSUMPTIONTIME, t0.CPUCONSUMPTIONUNIT, t0.COMMANDTOPILOT, t0.TRANSEXITCODE, t0.PILOTERRORCODE,
  t0.PILOTERRORDIAG, t0.EXEERRORCODE, t0.EXEERRORDIAG, t0.SUPERRORCODE, t0.SUPERRORDIAG, t0.DDMERRORCODE, t0.DDMERRORDIAG, t0.BROKERAGEERRORCODE, t0.BROKERAGEERRORDIAG, t0.JOBDISPATCHERERRORCODE, t0.JOBDISPATCHERERRORDIAG,
  t0.TASKBUFFERERRORCODE, t0.TASKBUFFERERRORDIAG, t0.COMPUTINGSITE, t0.COMPUTINGELEMENT, t0.JOBPARAMETERS, t0.METADATA, t0.PRODDBLOCK, t0.DISPATCHDBLOCK, t0.DESTINATIONDBLOCK, t0.DESTINATIONSE, t0.NEVENTS, 
  t0.GRID, t0.CLOUD, t0.CPUCONVERSION, t0.SOURCESITE, t0.DESTINATIONSITE, t0.TRANSFERTYPE, t0.TASKID, t0.CMTCONFIG, t0.STATECHANGETIME, t0.PRODDBUPDATETIME, t0.LOCKEDBY, t0.RELOCATIONFLAG, t0.JOBEXECUTIONID,
  t0.VO,t0.PILOTTIMING,t0.WORKINGGROUP,t0.PROCESSINGTYPE,t0.PRODUSERNAME,t0.NINPUTFILES,t0.COUNTRYGROUP,t0.BATCHID,t0.PARENTID,t0.SPECIALHANDLING,t0.JOBSETID,t0.CORECOUNT,t0.NINPUTDATAFILES,t0.INPUTFILETYPE,
  t0.INPUTFILEPROJECT,t0.INPUTFILEBYTES,t0.NOUTPUTDATAFILES,t0.OUTPUTFILEBYTES,t0.JOBMETRICS,t0.WORKQUEUE_ID,t0.JEDITASKID,t0.JOBSUBSTATUS,t0.ACTUALCORECOUNT,t0.REQID, t0.NEWPANDAID) 

  FROM 
  
  (SELECT t1.*, t2.NEWPANDAID, t3.METADATA as METADATA, RANK() OVER (PARTITION BY t1.PANDAID ORDER BY MODIFICATIONTIME) as RANK
  FROM (
  select tt1.PANDAID, tt1.JOBDEFINITIONID, tt1.SCHEDULERID, tt1.PILOTID, tt1.CREATIONTIME, tt1.CREATIONHOST, tt1.MODIFICATIONTIME, tt1.MODIFICATIONHOST, tt1.ATLASRELEASE, 
  tt1.TRANSFORMATION, tt1.HOMEPACKAGE, tt1.PRODSERIESLABEL, tt1.PRODSOURCELABEL, tt1.PRODUSERID, tt1.ASSIGNEDPRIORITY, tt1.CURRENTPRIORITY, tt1.ATTEMPTNR, tt1.MAXATTEMPT, tt1.JOBSTATUS, tt1.JOBNAME, tt1.MAXCPUCOUNT, tt1.MAXCPUUNIT,
  tt1.MAXDISKCOUNT, tt1.MAXDISKUNIT, tt1.IPCONNECTIVITY, tt1.MINRAMCOUNT, tt1.MINRAMUNIT, tt1.STARTTIME, tt1.ENDTIME, tt1.CPUCONSUMPTIONTIME, tt1.CPUCONSUMPTIONUNIT, tt1.COMMANDTOPILOT, tt1.TRANSEXITCODE, tt1.PILOTERRORCODE,
  tt1.PILOTERRORDIAG, tt1.EXEERRORCODE, tt1.EXEERRORDIAG, tt1.SUPERRORCODE, tt1.SUPERRORDIAG, tt1.DDMERRORCODE, tt1.DDMERRORDIAG, tt1.BROKERAGEERRORCODE, tt1.BROKERAGEERRORDIAG, tt1.JOBDISPATCHERERRORCODE, tt1.JOBDISPATCHERERRORDIAG,
  tt1.TASKBUFFERERRORCODE, tt1.TASKBUFFERERRORDIAG, tt1.COMPUTINGSITE, tt1.COMPUTINGELEMENT, tt1.JOBPARAMETERS, tt1.PRODDBLOCK, tt1.DISPATCHDBLOCK, tt1.DESTINATIONDBLOCK, tt1.DESTINATIONSE, tt1.NEVENTS, 
  tt1.GRID, tt1.CLOUD, tt1.CPUCONVERSION, tt1.SOURCESITE, tt1.DESTINATIONSITE, tt1.TRANSFERTYPE, tt1.TASKID, tt1.CMTCONFIG, tt1.STATECHANGETIME, tt1.PRODDBUPDATETIME, tt1.LOCKEDBY, tt1.RELOCATIONFLAG, tt1.JOBEXECUTIONID,
  tt1.VO,tt1.PILOTTIMING,tt1.WORKINGGROUP,tt1.PROCESSINGTYPE,tt1.PRODUSERNAME,tt1.NINPUTFILES,tt1.COUNTRYGROUP,tt1.BATCHID,tt1.PARENTID,tt1.SPECIALHANDLING,tt1.JOBSETID,tt1.CORECOUNT,tt1.NINPUTDATAFILES,tt1.INPUTFILETYPE,
  tt1.INPUTFILEPROJECT,tt1.INPUTFILEBYTES,tt1.NOUTPUTDATAFILES,tt1.OUTPUTFILEBYTES,tt1.JOBMETRICS,tt1.WORKQUEUE_ID,tt1.JEDITASKID,tt1.JOBSUBSTATUS,tt1.ACTUALCORECOUNT,tt1.REQID 
  FROM doma_panda.JOBSACTIVE4 tt1 WHERE ROWNUM < :a AND '||CONDITION||'
  UNION ALL
  select tt2.PANDAID, tt2.JOBDEFINITIONID, tt2.SCHEDULERID, tt2.PILOTID, tt2.CREATIONTIME, tt2.CREATIONHOST, tt2.MODIFICATIONTIME, tt2.MODIFICATIONHOST, tt2.ATLASRELEASE, 
  tt2.TRANSFORMATION, tt2.HOMEPACKAGE, tt2.PRODSERIESLABEL, tt2.PRODSOURCELABEL, tt2.PRODUSERID, tt2.ASSIGNEDPRIORITY, tt2.CURRENTPRIORITY, tt2.ATTEMPTNR, tt2.MAXATTEMPT, tt2.JOBSTATUS, tt2.JOBNAME, tt2.MAXCPUCOUNT, tt2.MAXCPUUNIT,
  tt2.MAXDISKCOUNT, tt2.MAXDISKUNIT, tt2.IPCONNECTIVITY, tt2.MINRAMCOUNT, tt2.MINRAMUNIT, tt2.STARTTIME, tt2.ENDTIME, tt2.CPUCONSUMPTIONTIME, tt2.CPUCONSUMPTIONUNIT, tt2.COMMANDTOPILOT, tt2.TRANSEXITCODE, tt2.PILOTERRORCODE,
  tt2.PILOTERRORDIAG, tt2.EXEERRORCODE, tt2.EXEERRORDIAG, tt2.SUPERRORCODE, tt2.SUPERRORDIAG, tt2.DDMERRORCODE, tt2.DDMERRORDIAG, tt2.BROKERAGEERRORCODE, tt2.BROKERAGEERRORDIAG, tt2.JOBDISPATCHERERRORCODE, tt2.JOBDISPATCHERERRORDIAG,
  tt2.TASKBUFFERERRORCODE, tt2.TASKBUFFERERRORDIAG, tt2.COMPUTINGSITE, tt2.COMPUTINGELEMENT, tt2.JOBPARAMETERS,  tt2.PRODDBLOCK, tt2.DISPATCHDBLOCK, tt2.DESTINATIONDBLOCK, tt2.DESTINATIONSE, tt2.NEVENTS, 
  tt2.GRID, tt2.CLOUD, tt2.CPUCONVERSION, tt2.SOURCESITE, tt2.DESTINATIONSITE, tt2.TRANSFERTYPE, tt2.TASKID, tt2.CMTCONFIG, tt2.STATECHANGETIME, tt2.PRODDBUPDATETIME, tt2.LOCKEDBY, tt2.RELOCATIONFLAG, tt2.JOBEXECUTIONID,
  tt2.VO,tt2.PILOTTIMING,tt2.WORKINGGROUP,tt2.PROCESSINGTYPE,tt2.PRODUSERNAME,tt2.NINPUTFILES,tt2.COUNTRYGROUP,tt2.BATCHID,tt2.PARENTID,tt2.SPECIALHANDLING,tt2.JOBSETID,tt2.CORECOUNT,tt2.NINPUTDATAFILES,tt2.INPUTFILETYPE,
  tt2.INPUTFILEPROJECT,tt2.INPUTFILEBYTES,tt2.NOUTPUTDATAFILES,tt2.OUTPUTFILEBYTES,tt2.JOBMETRICS,tt2.WORKQUEUE_ID,tt2.JEDITASKID,tt2.JOBSUBSTATUS,tt2.ACTUALCORECOUNT,tt2.REQID 
  FROM doma_panda.JOBSDEFINED4 tt2 WHERE ROWNUM < :a AND '||CONDITION||'
  UNION ALL
  select tt3.PANDAID, tt3.JOBDEFINITIONID, tt3.SCHEDULERID, tt3.PILOTID, tt3.CREATIONTIME, tt3.CREATIONHOST, tt3.MODIFICATIONTIME, tt3.MODIFICATIONHOST, tt3.ATLASRELEASE, 
  tt3.TRANSFORMATION, tt3.HOMEPACKAGE, tt3.PRODSERIESLABEL, tt3.PRODSOURCELABEL, tt3.PRODUSERID, tt3.ASSIGNEDPRIORITY, tt3.CURRENTPRIORITY, tt3.ATTEMPTNR, tt3.MAXATTEMPT, tt3.JOBSTATUS, tt3.JOBNAME, tt3.MAXCPUCOUNT, tt3.MAXCPUUNIT,
  tt3.MAXDISKCOUNT, tt3.MAXDISKUNIT, tt3.IPCONNECTIVITY, tt3.MINRAMCOUNT, tt3.MINRAMUNIT, tt3.STARTTIME, tt3.ENDTIME, tt3.CPUCONSUMPTIONTIME, tt3.CPUCONSUMPTIONUNIT, tt3.COMMANDTOPILOT, tt3.TRANSEXITCODE, tt3.PILOTERRORCODE,
  tt3.PILOTERRORDIAG, tt3.EXEERRORCODE, tt3.EXEERRORDIAG, tt3.SUPERRORCODE, tt3.SUPERRORDIAG, tt3.DDMERRORCODE, tt3.DDMERRORDIAG, tt3.BROKERAGEERRORCODE, tt3.BROKERAGEERRORDIAG, tt3.JOBDISPATCHERERRORCODE, tt3.JOBDISPATCHERERRORDIAG,
  tt3.TASKBUFFERERRORCODE, tt3.TASKBUFFERERRORDIAG, tt3.COMPUTINGSITE, tt3.COMPUTINGELEMENT, tt3.JOBPARAMETERS,  tt3.PRODDBLOCK, tt3.DISPATCHDBLOCK, tt3.DESTINATIONDBLOCK, tt3.DESTINATIONSE, tt3.NEVENTS, 
  tt3.GRID, tt3.CLOUD, tt3.CPUCONVERSION, tt3.SOURCESITE, tt3.DESTINATIONSITE, tt3.TRANSFERTYPE, tt3.TASKID, tt3.CMTCONFIG, tt3.STATECHANGETIME, tt3.PRODDBUPDATETIME, tt3.LOCKEDBY, tt3.RELOCATIONFLAG, tt3.JOBEXECUTIONID,
  tt3.VO,tt3.PILOTTIMING,tt3.WORKINGGROUP,tt3.PROCESSINGTYPE,tt3.PRODUSERNAME,tt3.NINPUTFILES,tt3.COUNTRYGROUP,tt3.BATCHID,tt3.PARENTID,tt3.SPECIALHANDLING,tt3.JOBSETID,tt3.CORECOUNT,tt3.NINPUTDATAFILES,tt3.INPUTFILETYPE,
  tt3.INPUTFILEPROJECT,tt3.INPUTFILEBYTES,tt3.NOUTPUTDATAFILES,tt3.OUTPUTFILEBYTES,tt3.JOBMETRICS,tt3.WORKQUEUE_ID,tt3.JEDITASKID,tt3.JOBSUBSTATUS,tt3.ACTUALCORECOUNT,tt3.REQID 
  FROM doma_panda.JOBSARCHIVED4 tt3 WHERE ROWNUM < :a AND '||CONDITION||'
  UNION ALL
  select tt4.PANDAID, tt4.JOBDEFINITIONID, tt4.SCHEDULERID, tt4.PILOTID, tt4.CREATIONTIME, tt4.CREATIONHOST, tt4.MODIFICATIONTIME, tt4.MODIFICATIONHOST, tt4.ATLASRELEASE, 
  tt4.TRANSFORMATION, tt4.HOMEPACKAGE, tt4.PRODSERIESLABEL, tt4.PRODSOURCELABEL, tt4.PRODUSERID, tt4.ASSIGNEDPRIORITY, tt4.CURRENTPRIORITY, tt4.ATTEMPTNR, tt4.MAXATTEMPT, tt4.JOBSTATUS, tt4.JOBNAME, tt4.MAXCPUCOUNT, tt4.MAXCPUUNIT,
  tt4.MAXDISKCOUNT, tt4.MAXDISKUNIT, tt4.IPCONNECTIVITY, tt4.MINRAMCOUNT, tt4.MINRAMUNIT, tt4.STARTTIME, tt4.ENDTIME, tt4.CPUCONSUMPTIONTIME, tt4.CPUCONSUMPTIONUNIT, tt4.COMMANDTOPILOT, tt4.TRANSEXITCODE, tt4.PILOTERRORCODE,
  tt4.PILOTERRORDIAG, tt4.EXEERRORCODE, tt4.EXEERRORDIAG, tt4.SUPERRORCODE, tt4.SUPERRORDIAG, tt4.DDMERRORCODE, tt4.DDMERRORDIAG, tt4.BROKERAGEERRORCODE, tt4.BROKERAGEERRORDIAG, tt4.JOBDISPATCHERERRORCODE, tt4.JOBDISPATCHERERRORDIAG,
  tt4.TASKBUFFERERRORCODE, tt4.TASKBUFFERERRORDIAG, tt4.COMPUTINGSITE, tt4.COMPUTINGELEMENT, tt4.JOBPARAMETERS,  tt4.PRODDBLOCK, tt4.DISPATCHDBLOCK, tt4.DESTINATIONDBLOCK, tt4.DESTINATIONSE, tt4.NEVENTS, 
  tt4.GRID, tt4.CLOUD, tt4.CPUCONVERSION, tt4.SOURCESITE, tt4.DESTINATIONSITE, tt4.TRANSFERTYPE, tt4.TASKID, tt4.CMTCONFIG, tt4.STATECHANGETIME, tt4.PRODDBUPDATETIME, tt4.LOCKEDBY, tt4.RELOCATIONFLAG, tt4.JOBEXECUTIONID,
  tt4.VO,tt4.PILOTTIMING,tt4.WORKINGGROUP,tt4.PROCESSINGTYPE,tt4.PRODUSERNAME,tt4.NINPUTFILES,tt4.COUNTRYGROUP,tt4.BATCHID,tt4.PARENTID,tt4.SPECIALHANDLING,tt4.JOBSETID,tt4.CORECOUNT,tt4.NINPUTDATAFILES,tt4.INPUTFILETYPE,
  tt4.INPUTFILEPROJECT,tt4.INPUTFILEBYTES,tt4.NOUTPUTDATAFILES,tt4.OUTPUTFILEBYTES,tt4.JOBMETRICS,tt4.WORKQUEUE_ID,tt4.JEDITASKID,tt4.JOBSUBSTATUS,tt4.ACTUALCORECOUNT,tt4.REQID 
  FROM doma_panda.JOBSWAITING4 tt4 WHERE ROWNUM < :a AND '||CONDITION||'
  UNION ALL
  select tt5.PANDAID, tt5.JOBDEFINITIONID, tt5.SCHEDULERID, tt5.PILOTID, tt5.CREATIONTIME, tt5.CREATIONHOST, tt5.MODIFICATIONTIME, tt5.MODIFICATIONHOST, tt5.ATLASRELEASE, 
  tt5.TRANSFORMATION, tt5.HOMEPACKAGE, tt5.PRODSERIESLABEL, tt5.PRODSOURCELABEL, tt5.PRODUSERID, tt5.ASSIGNEDPRIORITY, tt5.CURRENTPRIORITY, tt5.ATTEMPTNR, tt5.MAXATTEMPT, tt5.JOBSTATUS, tt5.JOBNAME, tt5.MAXCPUCOUNT, tt5.MAXCPUUNIT,
  tt5.MAXDISKCOUNT, tt5.MAXDISKUNIT, tt5.IPCONNECTIVITY, tt5.MINRAMCOUNT, tt5.MINRAMUNIT, tt5.STARTTIME, tt5.ENDTIME, tt5.CPUCONSUMPTIONTIME, tt5.CPUCONSUMPTIONUNIT, tt5.COMMANDTOPILOT, tt5.TRANSEXITCODE, tt5.PILOTERRORCODE,
  tt5.PILOTERRORDIAG, tt5.EXEERRORCODE, tt5.EXEERRORDIAG, tt5.SUPERRORCODE, tt5.SUPERRORDIAG, tt5.DDMERRORCODE, tt5.DDMERRORDIAG, tt5.BROKERAGEERRORCODE, tt5.BROKERAGEERRORDIAG, tt5.JOBDISPATCHERERRORCODE, tt5.JOBDISPATCHERERRORDIAG,
  tt5.TASKBUFFERERRORCODE, tt5.TASKBUFFERERRORDIAG, tt5.COMPUTINGSITE, tt5.COMPUTINGELEMENT, tt5.JOBPARAMETERS,  tt5.PRODDBLOCK, tt5.DISPATCHDBLOCK, tt5.DESTINATIONDBLOCK, tt5.DESTINATIONSE, tt5.NEVENTS, 
  tt5.GRID, tt5.CLOUD, tt5.CPUCONVERSION, tt5.SOURCESITE, tt5.DESTINATIONSITE, tt5.TRANSFERTYPE, tt5.TASKID, tt5.CMTCONFIG, tt5.STATECHANGETIME, tt5.PRODDBUPDATETIME, tt5.LOCKEDBY, tt5.RELOCATIONFLAG, tt5.JOBEXECUTIONID,
  tt5.VO,tt5.PILOTTIMING,tt5.WORKINGGROUP,tt5.PROCESSINGTYPE,tt5.PRODUSERNAME,tt5.NINPUTFILES,tt5.COUNTRYGROUP,tt5.BATCHID,tt5.PARENTID,tt5.SPECIALHANDLING,tt5.JOBSETID,tt5.CORECOUNT,tt5.NINPUTDATAFILES,tt5.INPUTFILETYPE,
  tt5.INPUTFILEPROJECT,tt5.INPUTFILEBYTES,tt5.NOUTPUTDATAFILES,tt5.OUTPUTFILEBYTES,tt5.JOBMETRICS,tt5.WORKQUEUE_ID,tt5.JEDITASKID,tt5.JOBSUBSTATUS,tt5.ACTUALCORECOUNT,tt5.REQID 
  FROM doma_pandaarch.JOBSARCHIVED tt5 WHERE ROWNUM < :a AND '||CONDITION||' 
  )t1 
   LEFT JOIN
   (
      SELECT NEWPANDAID, OLDPANDAID FROM doma_panda.JEDI_JOB_RETRY_HISTORY
           WHERE ( (OLDPANDAID != NEWPANDAID) AND 
           ((RELATIONTYPE is null) OR (RELATIONTYPE=''retry'')))
    )t2 
    ON t2.OLDPANDAID=t1.PANDAID
  LEFT JOIN
   (
    SELECT PANDAID, METADATA FROM (
      SELECT PANDAID, METADATA, RANK() OVER (PARTITION BY PANDAID ORDER BY MODIFICATIONTIME) as RANK FROM doma_panda.METATABLE
      ) WHERE RANK = 1
    )t3 
    ON t1.PANDAID=t3.PANDAID 
  ) t0 WHERE RANK=1 ORDER BY MODIFICATIONTIME DESC';

EXECUTE sqlstatement BULK COLLECT INTO STRICT l_res_coll USING IN MAXROWSTABLE, MAXROWSTABLE, MAXROWSTABLE, MAXROWSTABLE, MAXROWSTABLE;
return l_res_coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION getjobslist_dev31 (CONDITION text, MAXROWSTABLE integer) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.getjobslist_dev31 (CONDITION text, MAXROWSTABLE integer) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.gettaskprofile (CONDITION bigint) RETURNS TASKPROFILE_COLL AS $body$
DECLARE

coll TASKPROFILE_COLL;
sqlstatement varchar(32767);

BEGIN

sqlstatement := '
select doma_pandabigmon.TASKPROFILE_OBJ(p.endtime, p.starttime, p.nevents, p.njob)
from (
select endtime,starttime, NEVENTS, row_number() over (PARTITION BY jeditaskid order by endtime) as njob from
(select jeditaskid, starttime, endtime, NEVENTS, jobstatus, processingtype from  doma_panda.JOBSARCHIVED4
union all
select jeditaskid, starttime, endtime, NEVENTS, jobstatus, processingtype from doma_pandaarch.JOBSARCHIVED)
WHERE JEDITASKID= '|| CONDITION ||' and JOBSTATUS=''finished'' and processingtype!=''pmerge'') p';


EXECUTE sqlstatement BULK COLLECT INTO STRICT coll;
RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION gettaskprofile (CONDITION bigint) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.gettaskprofile (CONDITION bigint) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.gettaskschain (CONDITION bigint) RETURNS CHAINJSONTABLE_T AS $body$
DECLARE

coll CHAINJSONTABLE_T;
sqlstatement varchar(32767);

BEGIN
sqlstatement := '
with tasks as (
	SELECT ListAgg(parent_tid,'';'')
	       within group(order by Level desc) as revPath
	FROM ATLAS_DEFT.t_production_task
	START WITH taskid = '||CONDITION||'
	CONNECT BY NOCYCLE PRIOR parent_tid = taskid
	), 
    current_task as (
		select CASE WHEN ( INSTR(revPath,'';'') > 0 ) THEN substr(revPath,0,instr(revPath,'';'',1,1) - 1)
               ELSE revPath END as taskid
		from tasks
	),
	tasks_chain as (
		select ROWNUM as rnum, 
			   t.taskid, 
			   t.parent_tid, 
			   t.taskname, 
			   t.inputdataset, 
			   TO_CHAR(t.timestamp, ''DD-MM-RR HH24:MI:SS.FF'') as timestamp, 
			   t.phys_group, 
			   t.status, 
			   t.username, 
			   LEVEL as lvl
		from ATLAS_DEFT.t_production_task t, current_task ct 
		START WITH t.taskid = ct.taskid 
		CONNECT BY NOCYCLE t.parent_tid = PRIOR t.taskid
		),
	datasets as (
		select t.rnum as rnum, 
			   t.taskid as taskid, 
		   	   t.parent_tid as parent_tid, 
		   	   t.taskname as taskname, 
		       t.lvl as lvl, 
		       t.phys_group as phys_group,
		       t.status as status,
		       t.username as username,
		       t.timestamp as timestamp, 
	LISTAGG('' {"name" : "'' || d.name || ''", "timestamp" : "'' || d.timestamp || ''", "status" : "'' || d.status || ''", "files" : "'' || d.files || ''", "events" : "'' || d.events || ''"}'', '','') 
	WITHIN GROUP (ORDER BY d.name, 
						   d.timestamp, 
						   d.status, 
						   d.files, 
						   d.events) as datasets
	from tasks_chain t, ATLAS_DEFT.t_production_dataset d
	where  t.taskid = d.taskid 
	GROUP BY t.rnum, 
			 t.taskid, 
			 t.parent_tid, 
			 t.taskname, 
			 t.lvl, 
			 t.phys_group, 
			 t.status, 
			 t.username, 
			 t.timestamp
	)
	select 
	  CASE 
	    /* the top dog gets a left curly brace to start things off */

	    WHEN lvl = 1 THEN ''{''
	    /* when the last lvl is lower (shallower) than the current lvl, start a "children" array */

	    WHEN lvl - LAG(lvl) OVER (order by rnum) = 1 THEN '',"children" : [{'' 
	    ELSE '',{''
	  END 
	  || '' "name" : "'' || taskid || ''", ''
	  || '' "taskname" : "'' || taskname || ''", ''
	  || '' "phys_group" : "'' || phys_group || ''", ''
	  || '' "status" : "'' || status || ''", ''
	  || '' "username" : "'' || username || ''", ''
	  || '' "timestamp" : "'' || timestamp || ''", ''
	  || '' "datasets" : ['' || datasets || '']''
	  /* when the next lvl lower (shallower) than the current lvl, close a "children" array */

	  || CASE WHEN LEAD(lvl, 1, 1) OVER (order by rnum) - lvl <= 0 
	     THEN ''}'' || rpad( '' '', 1+ (-2 * (LEAD(lvl, 1, 1) OVER (order by rnum) - lvl)), '']}'' )
	     ELSE NULL 
	  END as JSON_SNIPPET
	from datasets
	order by rnum';

EXECUTE sqlstatement BULK COLLECT INTO STRICT coll;
RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION gettaskschain (CONDITION bigint) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.gettaskschain (CONDITION bigint) FROM PUBLIC;



--
-- dblink wrapper to call function doma_pandabigmon.old2_query_jobspage_all as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION doma_pandabigmon.old2_query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	PANDAMON_JOBSPAGE_COLL;
BEGIN
	v_query := 'SELECT * FROM old2_query_jobspage_all_atx ( ' || quote_nullable(RANGE_DAYS) || ',' || quote_nullable(WITH_RETRIALS) || ',' || quote_nullable(SHOW_RETRIED_PANDAIDS) || ',' || quote_nullable(ATLASRELEASE) || ',' || quote_nullable(ATTEMPTNR) || ',' || quote_nullable(COMPUTINGSITE) || ',' || quote_nullable(CLOUD) || ',' || quote_nullable(EVENTSERVICE) || ',' || quote_nullable(HOMEPACKAGE) || ',' || quote_nullable(INPUTFILEPROJECT) || ',' || quote_nullable(INPUTFILETYPE) || ',' || quote_nullable(JEDITASKID) || ',' || quote_nullable(JOBSTATUS) || ',' || quote_nullable(JOBSUBSTATUS) || ',' || quote_nullable(MINRAMCOUNT) || ',' || quote_nullable(NUCLEUS) || ',' || quote_nullable(PROCESSINGTYPE) || ',' || quote_nullable(PRODSOURCELABEL) || ',' || quote_nullable(PRODUSERNAME) || ',' || quote_nullable(REQID) || ',' || quote_nullable(TRANSFORMATION) || ',' || quote_nullable(WORKINGGROUP) || ',' || quote_nullable(BROKERAGEERRORCODE) || ',' || quote_nullable(DDMERRORCODE) || ',' || quote_nullable(EXEERRORCODE) || ',' || quote_nullable(JOBDISPATCHERERRORCODE) || ',' || quote_nullable(PILOTERRORCODE) || ',' || quote_nullable(SUPERRORCODE) || ',' || quote_nullable(TASKBUFFERERRORCODE) || ',' || quote_nullable(TRANSEXITCODE) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret PANDAMON_JOBSPAGE_COLL);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;


CREATE OR REPLACE FUNCTION doma_pandabigmon.old2_query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE

-- Necessary in order to avoid "ORA-14551 cannot perform a DML operation inside a query" error
arch_maxtime timestamp;
coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
stmt varchar(4000);


BEGIN

-- Depends on the asked time window
IF range_days <= 3 THEN

-- Then call only to the doma_pandabigmon.QUERY_JOBSPAGE is enough
stmt := 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( panda_attribute, attr_value, num_occurrences )
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt BULK COLLECT INTO STRICT coll USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;


ELSE --===============================================================================================================================
-- The period is larger than the last 3 days and then SUM the result from the QUERY_JOBSPAGE and QUERY_JOBSPAGE_ARCH has to be done
-- SELECT MAX(modificationtime) into ARCH_MAXTIME from doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH;
/*
IMPORTANT: insert into TMP table in order to have two independent queries.
If they are combined in a common SQL call with UNION ALL, then "ORA-08103: object no longer exists" is raised
often because of the longer execution time on the QUERY_JOBSPAGE_ALL procedure being bound to the query start SCN where the PANDAMON_JOBSPAGE table partition is replaced every 5 minutes
*/
-- INSERT data from the QUERY_JOBSPAGE_ARCH function
-----------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
( SELECT *
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE_ARCH
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
)
) ';

--DBMS_OUTPUT.put_line(stmt);
EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
-- INSERT data from the QUERY_JOBSPAGE function (most recent data )
------------------------------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
 SELECT * FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( attr, attr_value, SUM(num_occur) ) BULK COLLECT INTO STRICT coll
FROM doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL
GROUP BY ATTR, ATTR_VALUE;

-- In order to flush the data of the TMP table
commit;

END IF;


RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old2_query_jobspage_all ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old2_query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_jobspage ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'Y', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);


BEGIN


  -- Ver 1.2, 15th August 2016
  -- Editted 23 Sept
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- ! Note: MIGHT be better to remove the MODIFICATIONTIME constraint as the live job statuses go beyond the 3 days
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  -- 27 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  -- !!! Note: hard-coded 30 days time range on the live data because jobs with certain statuses can be stuck in time
  stmt := 'SELECT '' WHERE MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) -  '|| (RANGE_DAYS)::numeric ::varchar || ''' || '' ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| (EVENTSERVICE)::numeric ::varchar ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  --DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(WITH_RETRIALS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  (
   SELECT ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
  ) where rownum <= 1000
 ) subq ';


ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
  (  SELECT  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;


-- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 4';


  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old_query_jobspage ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old_query_jobspage ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'Y', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_jobspage_20thoct ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'Y', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);


BEGIN


  -- Ver 1.2, 15th August 2016
  -- Editted 23 Sept
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- ! Note: MIGHT be better to remove the MODIFICATIONTIME constraint as the live job statuses go beyond the 3 days
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  -- 27 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  -- !!! Note: hard-coded 30 days time range on the live data because jobs with certain statuses can be stuck in time
  stmt := 'SELECT '' WHERE MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) -  '|| (RANGE_DAYS)::numeric ::varchar || ''' || '' ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| (EVENTSERVICE)::numeric ::varchar ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  --DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(WITH_RETRIALS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  (
   SELECT ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
  ) where rownum <= 1000
 ) subq ';


ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
  (  SELECT  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;


-- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 4';


  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old_query_jobspage_20thoct ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old_query_jobspage_20thoct ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'Y', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



--
-- dblink wrapper to call function doma_pandabigmon.old_query_jobspage_all as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	PANDAMON_JOBSPAGE_COLL;
BEGIN
	v_query := 'SELECT * FROM old_query_jobspage_all_atx ( ' || quote_nullable(RANGE_DAYS) || ',' || quote_nullable(WITH_RETRIALS) || ',' || quote_nullable(SHOW_RETRIED_PANDAIDS) || ',' || quote_nullable(ATLASRELEASE) || ',' || quote_nullable(ATTEMPTNR) || ',' || quote_nullable(COMPUTINGSITE) || ',' || quote_nullable(CLOUD) || ',' || quote_nullable(EVENTSERVICE) || ',' || quote_nullable(HOMEPACKAGE) || ',' || quote_nullable(INPUTFILEPROJECT) || ',' || quote_nullable(INPUTFILETYPE) || ',' || quote_nullable(JEDITASKID) || ',' || quote_nullable(JOBSTATUS) || ',' || quote_nullable(JOBSUBSTATUS) || ',' || quote_nullable(MINRAMCOUNT) || ',' || quote_nullable(NUCLEUS) || ',' || quote_nullable(PROCESSINGTYPE) || ',' || quote_nullable(PRODSOURCELABEL) || ',' || quote_nullable(PRODUSERNAME) || ',' || quote_nullable(REQID) || ',' || quote_nullable(TRANSFORMATION) || ',' || quote_nullable(WORKINGGROUP) || ',' || quote_nullable(BROKERAGEERRORCODE) || ',' || quote_nullable(DDMERRORCODE) || ',' || quote_nullable(EXEERRORCODE) || ',' || quote_nullable(JOBDISPATCHERERRORCODE) || ',' || quote_nullable(PILOTERRORCODE) || ',' || quote_nullable(SUPERRORCODE) || ',' || quote_nullable(TASKBUFFERERRORCODE) || ',' || quote_nullable(TRANSEXITCODE) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret PANDAMON_JOBSPAGE_COLL);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;


CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE

-- Necessary in order to avoid "ORA-14551 cannot perform a DML operation inside a query" error
arch_maxtime timestamp;
coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
stmt varchar(4000);


BEGIN

-- Depends on the asked time window
IF range_days <= 3 THEN

-- Then call only to the doma_pandabigmon.QUERY_JOBSPAGE is enough
stmt := 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( panda_attribute, attr_value, num_occurrences )
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt BULK COLLECT INTO STRICT coll USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;


ELSE --===============================================================================================================================
-- The period is larger than the last 3 days and then SUM the result from the QUERY_JOBSPAGE and QUERY_JOBSPAGE_ARCH has to be done
-- SELECT MAX(modificationtime) into ARCH_MAXTIME from doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH;
/*
IMPORTANT: insert into TMP table in order to have two independent queries.
If they are combined in a common SQL call with UNION ALL, then "ORA-08103: object no longer exists" is raised
often because of the longer execution time on the QUERY_JOBSPAGE_ALL procedure being bound to the query start SCN where the PANDAMON_JOBSPAGE table partition is replaced every 5 minutes
*/
-- INSERT data from the QUERY_JOBSPAGE_ARCH function
-----------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
( SELECT *
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE_ARCH
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
)
) ';

--DBMS_OUTPUT.put_line(stmt);
EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
-- INSERT data from the QUERY_JOBSPAGE function (most recent data )
------------------------------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
 SELECT * FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( attr, attr_value, SUM(num_occur) ) BULK COLLECT INTO STRICT coll
FROM doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL
GROUP BY ATTR, ATTR_VALUE;

-- In order to flush the data of the TMP table
commit;

END IF;


RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old_query_jobspage_all ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old_query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_jobspage_arch ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);


BEGIN


  -- Ver 1.0, 12th August 2016
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  -- 20 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  stmt := 'SELECT '' WHERE MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) -  '|| (RANGE_DAYS)::numeric ::varchar || ''' || '' ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| DBMS_ASSERT.ENQUOTE_LITERAL(EVENTSERVICE) ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  --DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(SHOW_RETRIED_PANDAIDS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP 
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE 
   ) where attr_val IS NOT NULL
  ) subq ';

-- UNION ALL
--  SELECT attr, TO_CHAR(pandaid), 1 FROM
--  (
--   SELECT ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
--  ) where rownum <= 1000
ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;

--  UNION ALL
--  SELECT ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
--  (  SELECT  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
-- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 6';


  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old_query_jobspage_arch ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old_query_jobspage_arch ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_jobspage_arch_daily ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);
t_stamp TIMESTAMP;

BEGIN


  -- Ver 1.0, 25th August 2016
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  t_stamp:= (CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - (RANGE_DAYS)::numeric;


  -- 20 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  stmt := 'SELECT '' WHERE MODIFICATIONTIME >  TO_DATE('|| TO_CHAR(t_stamp, '''''DD-MM-YYYY HH24:MI:SS''''') || ', ''''DD-MM-YYYY HH24:MI:SS'''') '' || '' ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| DBMS_ASSERT.ENQUOTE_LITERAL(EVENTSERVICE) ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  --DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(SHOW_RETRIED_PANDAIDS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT /*+ parallel 6*/ attr, attr_val, cnt  FROM
   (
   SELECT  ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  ) subq ';

-- UNION ALL
--  SELECT attr, TO_CHAR(pandaid), 1 FROM
--  (
--   SELECT /*+ parallel 6*/ ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
--  ) where rownum <= 1000
ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT /*+ parallel 6 */ attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT  attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT /*+ parallel 6*/ ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;

--  UNION ALL
--  SELECT  ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
--  (  SELECT /*+ parallel 6*/  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
-- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  --EXECUTE IMMEDIATE 'ALTER SESSION FORCE PARALLEL QUERY parallel 6';
  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  --EXECUTE IMMEDIATE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  --EXECUTE IMMEDIATE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';
  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old_query_jobspage_arch_daily ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old_query_jobspage_arch_daily ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.old_query_pandamon_jobspage ( RANGE_DAYS text default '1', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
where_conditions varchar(2000);
stmt varchar(32000);


BEGIN


-- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure agains SQL injection. For the NUMBER input use TO_NUMBER function as protection
-- to check that the "RANGE_DAYS" is positive ?
where_conditions := ' WHERE MODIFICATIONTIME <= SYSDATE-'|| (RANGE_DAYS)::numeric ::varchar;

-- 20 filtering conditions can be put in place now
-- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
SELECT ' WHERE MODIFICATIONTIME > sysdate - '|| (RANGE_DAYS)::numeric ::varchar || ' '
	|| (CASE WHEN (ATLASRELEASE IS NOT NULL AND ATLASRELEASE::text <> '') THEN ' AND ATLASRELEASE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(ATLASRELEASE) ELSE '' END)
	|| (CASE WHEN (ATTEMPTNR IS NOT NULL AND ATTEMPTNR::text <> '') THEN ' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ELSE ''  END)
	|| (CASE WHEN (COMPUTINGSITE IS NOT NULL AND COMPUTINGSITE::text <> '') THEN ' AND COMPUTINGSITE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(COMPUTINGSITE) ELSE '' END)
 	|| (CASE WHEN (CLOUD IS NOT NULL AND CLOUD::text <> '') THEN ' AND CLOUD = ' || DBMS_ASSERT.ENQUOTE_LITERAL(CLOUD) ELSE '' END)
 	|| (CASE WHEN (EVENTSERVICE IS NOT NULL AND EVENTSERVICE::text <> '') THEN ' AND EVENTSERVICE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(EVENTSERVICE) ELSE '' END)
 	|| (CASE WHEN (HOMEPACKAGE IS NOT NULL AND HOMEPACKAGE::text <> '') THEN ' AND HOMEPACKAGE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(HOMEPACKAGE) ELSE '' END)
	|| (CASE WHEN (INPUTFILEPROJECT IS NOT NULL AND INPUTFILEPROJECT::text <> '') THEN ' AND INPUTFILEPROJECT = ' || DBMS_ASSERT.ENQUOTE_LITERAL(INPUTFILEPROJECT) ELSE '' END)
	|| (CASE WHEN (INPUTFILETYPE IS NOT NULL AND INPUTFILETYPE::text <> '') THEN ' AND INPUTFILETYPE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(INPUTFILETYPE) ELSE '' END)
	|| (CASE WHEN (JEDITASKID IS NOT NULL AND JEDITASKID::text <> '') THEN ' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ELSE ''  END)
 	|| (CASE WHEN (JOBSTATUS IS NOT NULL AND JOBSTATUS::text <> '') THEN ' AND JOBSTATUS = ' || DBMS_ASSERT.ENQUOTE_LITERAL(JOBSTATUS) ELSE '' END)
	|| (CASE WHEN (JOBSUBSTATUS IS NOT NULL AND JOBSUBSTATUS::text <> '') THEN ' AND JOBSUBSTATUS = ' || DBMS_ASSERT.ENQUOTE_LITERAL(JOBSUBSTATUS) ELSE '' END)
	|| (CASE WHEN (MINRAMCOUNT IS NOT NULL AND MINRAMCOUNT::text <> '') THEN ' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ELSE ''  END)
 	|| (CASE WHEN (NUCLEUS IS NOT NULL AND NUCLEUS::text <> '') THEN ' AND NUCLEUS = ' || DBMS_ASSERT.ENQUOTE_LITERAL(NUCLEUS) ELSE '' END)
	|| (CASE WHEN (PROCESSINGTYPE IS NOT NULL AND PROCESSINGTYPE::text <> '') THEN ' AND PROCESSINGTYPE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(PROCESSINGTYPE) ELSE '' END)
	|| (CASE WHEN (PRODSOURCELABEL IS NOT NULL AND PRODSOURCELABEL::text <> '') THEN ' AND PRODSOURCELABEL = ' || DBMS_ASSERT.ENQUOTE_LITERAL(PRODSOURCELABEL) ELSE '' END)
	|| (CASE WHEN (PRODUSERNAME IS NOT NULL AND PRODUSERNAME::text <> '') THEN ' AND PRODUSERNAME = ' || DBMS_ASSERT.ENQUOTE_LITERAL(PRODUSERNAME) ELSE '' END)
	|| (CASE WHEN (REQID IS NOT NULL AND REQID::text <> '') THEN ' AND REQID = '|| (REQID)::numeric ::varchar ELSE ''  END)
	|| (CASE WHEN (TRANSFORMATION IS NOT NULL AND TRANSFORMATION::text <> '') THEN ' AND TRANSFORMATION = ' || DBMS_ASSERT.ENQUOTE_LITERAL(TRANSFORMATION) ELSE '' END)
	|| (CASE WHEN (WORKINGGROUP IS NOT NULL AND WORKINGGROUP::text <> '') THEN ' AND WORKINGGROUP = ' || DBMS_ASSERT.ENQUOTE_LITERAL(WORKINGGROUP) ELSE '' END)
INTO STRICT where_conditions;




-- compose the complete SQL statement
stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
(
  SELECT attr, attr_val, cnt  FROM
 (
 SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
 UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
 UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
 UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
 UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
 UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
 UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
 UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
 UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JEDITASKID
 UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
 UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
 UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
 UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
 UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
 UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
 UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
 UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
 UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
 UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
 ) where attr_val IS NOT NULL
) subq';


-- DBMS_OUTPUT.put_line (where_conditions);
-- DBMS_OUTPUT.put_line (stmt);
-- Parallelism Settings on session level
EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 4';


EXECUTE stmt BULK COLLECT INTO STRICT coll;

-- Settings on session level
EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

RETURN coll;

END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION old_query_pandamon_jobspage ( RANGE_DAYS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.old_query_pandamon_jobspage ( RANGE_DAYS text default '1', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage ( END_DATE text DEFAULT NULL, RANGE_DAYS text DEFAULT '3', WITH_RETRIALS text DEFAULT 'Y', SHOW_RETRIED_PANDAIDS text DEFAULT 'N', ATLASRELEASE text DEFAULT NULL, ATTEMPTNR text DEFAULT NULL, COMPUTINGSITE text DEFAULT NULL, CLOUD text DEFAULT NULL, EVENTSERVICE text DEFAULT NULL, HOMEPACKAGE text DEFAULT NULL, INPUTFILEPROJECT text DEFAULT NULL, INPUTFILETYPE text DEFAULT NULL, JEDITASKID text DEFAULT NULL, JOBSTATUS text DEFAULT NULL, JOBSUBSTATUS text DEFAULT NULL, MINRAMCOUNT text DEFAULT '(0, 10000000000)', NUCLEUS text DEFAULT NULL, PROCESSINGTYPE text DEFAULT NULL, PRODSOURCELABEL text DEFAULT NULL, PRODUSERNAME text DEFAULT NULL, REQID text DEFAULT NULL, TRANSFORMATION text DEFAULT NULL, WORKINGGROUP text DEFAULT NULL, BROKERAGEERRORCODE text DEFAULT NULL, DDMERRORCODE text DEFAULT NULL, EXEERRORCODE text DEFAULT NULL, JOBDISPATCHERERRORCODE text DEFAULT NULL, PILOTERRORCODE text DEFAULT NULL, SUPERRORCODE text DEFAULT NULL, TASKBUFFERERRORCODE text DEFAULT NULL, TRANSEXITCODE text DEFAULT NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);


BEGIN


  -- Ver 1.3, 11th Oct 2016
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- ! Note: MIGHT be better to remove the MODIFICATIONTIME constraint as the live job statuses go beyond the 3 days
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  -- 27 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  -- !!! OLD: Note: hard-coded 30 days time range on the live data because jobs with certain statuses can be stuck in time
  -- DBMS_OUTPUT.put_line (TO_CHAR(start_date));
  stmt := 'SELECT '' WHERE MODIFICATIONTIME > SYS_EXTRACT_UTC(TO_TIMESTAMP_TZ('''''|| END_DATE ||''''', ''''DD-MM-YYYY HH24:MI:SS.FF TZH:TZM'''') )  -  '|| (RANGE_DAYS)::numeric ::varchar || ' AND MODIFICATIONTIME <= SYS_EXTRACT_UTC(TO_TIMESTAMP_TZ('''''|| END_DATE ||''''', ''''DD-MM-YYYY HH24:MI:SS.FF TZH:TZM'''') ) '' 
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| (EVENTSERVICE)::numeric ::varchar ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT >= '|| (SUBSTR(MINRAMCOUNT, INSTR(MINRAMCOUNT, '(', 1, 1)+1,  INSTR(MINRAMCOUNT, ',', 1, 1) -INSTR(MINRAMCOUNT, '(', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT <= '|| (SUBSTR(MINRAMCOUNT, INSTR(MINRAMCOUNT, ',', 1, 1)+1,  INSTR(MINRAMCOUNT, ')', 1, 1) -INSTR(MINRAMCOUNT, ',', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
   FROM dual';

  RAISE NOTICE '%', stmt;
  RAISE NOTICE '==========================';
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE,MINRAMCOUNT;
  RAISE NOTICE '%', where_conditions;


  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(WITH_RETRIALS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''ready'', SUM(ESEVENTS_READY) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_READY is not null AND ESEVENTS_READY> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''sent'', SUM(ESEVENTS_SENT) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_SENT is not null AND ESEVENTS_SENT> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''running'', SUM(ESEVENTS_RUNNING) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_RUNNING is not null AND ESEVENTS_RUNNING> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''finished'', SUM(ESEVENTS_FINISHED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_FINISHED is not null AND ESEVENTS_FINISHED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''cancelled'', SUM(ESEVENTS_CANCELLED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_CANCELLED is not null AND ESEVENTS_CANCELLED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''discarded'', SUM(ESEVENTS_DISCARDED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_DISCARDED is not null AND ESEVENTS_DISCARDED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''done'', SUM(ESEVENTS_DONE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_DONE is not null AND ESEVENTS_DONE> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''failed'', SUM(ESEVENTS_FAILED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_FAILED is not null AND ESEVENTS_FAILED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''fatal'', SUM(ESEVENTS_FATAL) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_FATAL is not null AND ESEVENTS_FATAL> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''merged'', SUM(ESEVENTS_MERGED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_MERGED is not null AND ESEVENTS_MERGED> 0)




   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  (
   SELECT ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
  ) where rownum <= 1000
 ) subq ';


ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''ready'', SUM(ESEVENTS_READY) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_READY is not null AND ESEVENTS_READY> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''sent'', SUM(ESEVENTS_SENT) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_SENT is not null AND ESEVENTS_SENT> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''running'', SUM(ESEVENTS_RUNNING) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_RUNNING is not null AND ESEVENTS_RUNNING> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''finished'', SUM(ESEVENTS_FINISHED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_FINISHED is not null AND ESEVENTS_FINISHED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''cancelled'', SUM(ESEVENTS_CANCELLED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_CANCELLED is not null AND ESEVENTS_CANCELLED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''discarded'', SUM(ESEVENTS_DISCARDED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_DISCARDED is not null AND ESEVENTS_DISCARDED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''done'', SUM(ESEVENTS_DONE) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_DONE is not null AND ESEVENTS_DONE> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''failed'', SUM(ESEVENTS_FAILED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_FAILED is not null AND ESEVENTS_FAILED> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''fatal'', SUM(ESEVENTS_FATAL) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_FATAL is not null AND ESEVENTS_FATAL> 0)
   UNION ALL SELECT ''EVENTSERVICESTATUS'' ,''merged'', SUM(ESEVENTS_MERGED) from doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND (ESEVENTS_MERGED is not null AND ESEVENTS_MERGED> 0)
  
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
  (  SELECT  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;


  RAISE NOTICE '%', stmt;


  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 4';


  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_jobspage ( END_DATE text, RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_jobspage ( END_DATE text DEFAULT NULL, RANGE_DAYS text DEFAULT '3', WITH_RETRIALS text DEFAULT 'Y', SHOW_RETRIED_PANDAIDS text DEFAULT 'N', ATLASRELEASE text DEFAULT NULL, ATTEMPTNR text DEFAULT NULL, COMPUTINGSITE text DEFAULT NULL, CLOUD text DEFAULT NULL, EVENTSERVICE text DEFAULT NULL, HOMEPACKAGE text DEFAULT NULL, INPUTFILEPROJECT text DEFAULT NULL, INPUTFILETYPE text DEFAULT NULL, JEDITASKID text DEFAULT NULL, JOBSTATUS text DEFAULT NULL, JOBSUBSTATUS text DEFAULT NULL, MINRAMCOUNT text DEFAULT '(0, 10000000000)', NUCLEUS text DEFAULT NULL, PROCESSINGTYPE text DEFAULT NULL, PRODSOURCELABEL text DEFAULT NULL, PRODUSERNAME text DEFAULT NULL, REQID text DEFAULT NULL, TRANSFORMATION text DEFAULT NULL, WORKINGGROUP text DEFAULT NULL, BROKERAGEERRORCODE text DEFAULT NULL, DDMERRORCODE text DEFAULT NULL, EXEERRORCODE text DEFAULT NULL, JOBDISPATCHERERRORCODE text DEFAULT NULL, PILOTERRORCODE text DEFAULT NULL, SUPERRORCODE text DEFAULT NULL, TASKBUFFERERRORCODE text DEFAULT NULL, TRANSEXITCODE text DEFAULT NULL) FROM PUBLIC;



--
-- dblink wrapper to call function doma_pandabigmon.query_jobspage_all as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	PANDAMON_JOBSPAGE_COLL;
BEGIN
	v_query := 'SELECT * FROM query_jobspage_all_atx ( ' || quote_nullable(RANGE_DAYS) || ',' || quote_nullable(WITH_RETRIALS) || ',' || quote_nullable(SHOW_RETRIED_PANDAIDS) || ',' || quote_nullable(ATLASRELEASE) || ',' || quote_nullable(ATTEMPTNR) || ',' || quote_nullable(COMPUTINGSITE) || ',' || quote_nullable(CLOUD) || ',' || quote_nullable(EVENTSERVICE) || ',' || quote_nullable(HOMEPACKAGE) || ',' || quote_nullable(INPUTFILEPROJECT) || ',' || quote_nullable(INPUTFILETYPE) || ',' || quote_nullable(JEDITASKID) || ',' || quote_nullable(JOBSTATUS) || ',' || quote_nullable(JOBSUBSTATUS) || ',' || quote_nullable(MINRAMCOUNT) || ',' || quote_nullable(NUCLEUS) || ',' || quote_nullable(PROCESSINGTYPE) || ',' || quote_nullable(PRODSOURCELABEL) || ',' || quote_nullable(PRODUSERNAME) || ',' || quote_nullable(REQID) || ',' || quote_nullable(TRANSFORMATION) || ',' || quote_nullable(WORKINGGROUP) || ',' || quote_nullable(BROKERAGEERRORCODE) || ',' || quote_nullable(DDMERRORCODE) || ',' || quote_nullable(EXEERRORCODE) || ',' || quote_nullable(JOBDISPATCHERERRORCODE) || ',' || quote_nullable(PILOTERRORCODE) || ',' || quote_nullable(SUPERRORCODE) || ',' || quote_nullable(TASKBUFFERERRORCODE) || ',' || quote_nullable(TRANSEXITCODE) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret PANDAMON_JOBSPAGE_COLL);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;


CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE

-- Necessary in order to avoid "ORA-14551 cannot perform a DML operation inside a query" error
arch_maxtime timestamp;
coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
stmt varchar(4000);


BEGIN

-- Depends on the asked time window
IF range_days <= 3 THEN

-- Then call only to the doma_pandabigmon.QUERY_JOBSPAGE is enough
stmt := 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( panda_attribute, attr_value, num_occurrences )
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt BULK COLLECT INTO STRICT coll USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;


ELSE --===============================================================================================================================
-- The period is larger than the last 3 days and then SUM the result from the QUERY_JOBSPAGE and QUERY_JOBSPAGE_ARCH has to be done
-- SELECT MAX(modificationtime) into ARCH_MAXTIME from doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH;
/*
IMPORTANT: insert into TMP table in order to have two independent queries.
If they are combined in a common SQL call with UNION ALL, then "ORA-08103: object no longer exists" is raised
often because of the longer execution time on the QUERY_JOBSPAGE_ALL procedure being bound to the query start SCN where the PANDAMON_JOBSPAGE table partition is replaced every 5 minutes
*/
-- INSERT data from the QUERY_JOBSPAGE_ARCH function
-----------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
( SELECT *
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE_ARCH
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
)
) ';

--DBMS_OUTPUT.put_line(stmt);
EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
-- INSERT data from the QUERY_JOBSPAGE function (most recent data )
------------------------------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
 SELECT * FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( attr, attr_value, SUM(num_occur) ) BULK COLLECT INTO STRICT coll
FROM doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL
GROUP BY ATTR, ATTR_VALUE;

-- In order to flush the data of the TMP table
commit;

END IF;


RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_jobspage_all ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_jobspage_all ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



--
-- dblink wrapper to call function doma_pandabigmon.query_jobspage_all_old2 as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_all_old2 ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	PANDAMON_JOBSPAGE_COLL;
BEGIN
	v_query := 'SELECT * FROM query_jobspage_all_old2_atx ( ' || quote_nullable(RANGE_DAYS) || ',' || quote_nullable(WITH_RETRIALS) || ',' || quote_nullable(SHOW_RETRIED_PANDAIDS) || ',' || quote_nullable(ATLASRELEASE) || ',' || quote_nullable(ATTEMPTNR) || ',' || quote_nullable(COMPUTINGSITE) || ',' || quote_nullable(CLOUD) || ',' || quote_nullable(EVENTSERVICE) || ',' || quote_nullable(HOMEPACKAGE) || ',' || quote_nullable(INPUTFILEPROJECT) || ',' || quote_nullable(INPUTFILETYPE) || ',' || quote_nullable(JEDITASKID) || ',' || quote_nullable(JOBSTATUS) || ',' || quote_nullable(JOBSUBSTATUS) || ',' || quote_nullable(MINRAMCOUNT) || ',' || quote_nullable(NUCLEUS) || ',' || quote_nullable(PROCESSINGTYPE) || ',' || quote_nullable(PRODSOURCELABEL) || ',' || quote_nullable(PRODUSERNAME) || ',' || quote_nullable(REQID) || ',' || quote_nullable(TRANSFORMATION) || ',' || quote_nullable(WORKINGGROUP) || ',' || quote_nullable(BROKERAGEERRORCODE) || ',' || quote_nullable(DDMERRORCODE) || ',' || quote_nullable(EXEERRORCODE) || ',' || quote_nullable(JOBDISPATCHERERRORCODE) || ',' || quote_nullable(PILOTERRORCODE) || ',' || quote_nullable(SUPERRORCODE) || ',' || quote_nullable(TASKBUFFERERRORCODE) || ',' || quote_nullable(TRANSEXITCODE) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret PANDAMON_JOBSPAGE_COLL);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;


CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_all_old2 ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE

-- Necessary in order to avoid "ORA-14551 cannot perform a DML operation inside a query" error
arch_maxtime timestamp;
coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
stmt varchar(4000);


BEGIN

-- Depends on the asked time window
IF range_days <= 3 THEN

-- Then call only to the doma_pandabigmon.QUERY_JOBSPAGE is enough
stmt := 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( panda_attribute, attr_value, num_occurrences )
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt BULK COLLECT INTO STRICT coll USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;


ELSE --===============================================================================================================================
-- The period is larger than the last 3 days and then SUM the result from the QUERY_JOBSPAGE and QUERY_JOBSPAGE_ARCH has to be done
-- SELECT MAX(modificationtime) into ARCH_MAXTIME from doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH;
/*
IMPORTANT: insert into TMP table in order to have two independent queries.
If they are combined in a common SQL call with UNION ALL, then "ORA-08103: object no longer exists" is raised
often because of the longer execution time on the QUERY_JOBSPAGE_ALL procedure being bound to the query start SCN where the PANDAMON_JOBSPAGE table partition is replaced every 5 minutes
*/
-- INSERT data from the QUERY_JOBSPAGE_ARCH function
-----------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
( SELECT *
FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE_ARCH
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
)
) ';

--DBMS_OUTPUT.put_line(stmt);
EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
-- INSERT data from the QUERY_JOBSPAGE function (most recent data )
------------------------------------------------------------------------
stmt:= 'INSERT into doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL (ATTR, ATTR_VALUE, NUM_OCCUR )
 SELECT * FROM table
(
doma_pandabigmon.QUERY_JOBSPAGE
(
:RANGE_DAYS,
:WITH_RETRIALS,
:SHOW_RETRIED_PANDAIDS,
:ATLASRELEASE,
:ATTEMPTNR,
:COMPUTINGSITE,
:CLOUD,
:EVENTSERVICE,
:HOMEPACKAGE,
:INPUTFILEPROJECT,
:INPUTFILETYPE,
:JEDITASKID,
:JOBSTATUS,
:JOBSUBSTATUS,
:MINRAMCOUNT,
:NUCLEUS,
:PROCESSINGTYPE,
:PRODSOURCELABEL ,
:PRODUSERNAME ,
:REQID ,
:TRANSFORMATION ,
:WORKINGGROUP ,
:BROKERAGEERRORCODE ,
:DDMERRORCODE ,
:EXEERRORCODE ,
:JOBDISPATCHERERRORCODE ,
:PILOTERRORCODE ,
:SUPERRORCODE ,
:TASKBUFFERERRORCODE ,
:TRANSEXITCODE
)
) ';

EXECUTE stmt USING
RANGE_DAYS,
WITH_RETRIALS,
SHOW_RETRIED_PANDAIDS,
ATLASRELEASE,
ATTEMPTNR,
COMPUTINGSITE,
CLOUD,
EVENTSERVICE,
HOMEPACKAGE,
INPUTFILEPROJECT,
INPUTFILETYPE,
JEDITASKID,
JOBSTATUS,
JOBSUBSTATUS,
MINRAMCOUNT,
NUCLEUS,
PROCESSINGTYPE,
PRODSOURCELABEL ,
PRODUSERNAME ,
REQID ,
TRANSFORMATION ,
WORKINGGROUP ,
BROKERAGEERRORCODE ,
DDMERRORCODE ,
EXEERRORCODE ,
JOBDISPATCHERERRORCODE ,
PILOTERRORCODE ,
SUPERRORCODE ,
TASKBUFFERERRORCODE ,
TRANSEXITCODE;
------------------------------------------------------------------------
SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( attr, attr_value, SUM(num_occur) ) BULK COLLECT INTO STRICT coll
FROM doma_pandabigmon.TMP_JOBSPAGE_AGGR_ALL
GROUP BY ATTR, ATTR_VALUE;

-- In order to flush the data of the TMP table
commit;

END IF;


RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_jobspage_all_old2 ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_jobspage_all_old2 ( RANGE_DAYS text default '3', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_arch ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, CURRENTPRIORITY text default '(0, 10000000)', EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default '(0, 10000000000)', NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);


BEGIN


  -- Ver 1.0, 12th August 2016
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  -- 20 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  stmt := 'SELECT '' WHERE MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) -  '|| (RANGE_DAYS)::numeric ::varchar || ''' || '' ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| DBMS_ASSERT.ENQUOTE_LITERAL(EVENTSERVICE) ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT >= '|| (SUBSTR(MINRAMCOUNT, INSTR(MINRAMCOUNT, '(', 1, 1)+1,  INSTR(MINRAMCOUNT, ',', 1, 1) -INSTR(MINRAMCOUNT, '(', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT <= '|| (SUBSTR(MINRAMCOUNT, INSTR(MINRAMCOUNT, ',', 1, 1)+1,  INSTR(MINRAMCOUNT, ')', 1, 1) -INSTR(MINRAMCOUNT, ',', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  || NVL2(:CURRENTPRIORITY,'' AND CURRENTPRIORITY >= '|| (SUBSTR(CURRENTPRIORITY, INSTR(CURRENTPRIORITY, '(', 1, 1)+1,  INSTR(CURRENTPRIORITY, ',', 1, 1) -INSTR(CURRENTPRIORITY, '(', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:CURRENTPRIORITY,'' AND CURRENTPRIORITY <= '|| (SUBSTR(CURRENTPRIORITY, INSTR(CURRENTPRIORITY, ',', 1, 1)+1,  INSTR(CURRENTPRIORITY, ')', 1, 1) -INSTR(CURRENTPRIORITY, ',', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  --DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(SHOW_RETRIED_PANDAIDS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''CURRENTPRIORITY'', to_char(CURRENTPRIORITY), count(CURRENTPRIORITY) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CURRENTPRIORITY
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP 
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE 
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE 
   ) where attr_val IS NOT NULL
  ) subq ';

-- UNION ALL
--  SELECT attr, TO_CHAR(pandaid), 1 FROM
--  (
--   SELECT ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
--  ) where rownum <= 1000
ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''CURRENTPRIORITY'', to_char(CURRENTPRIORITY), count(CURRENTPRIORITY) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CURRENTPRIORITY
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;

--  UNION ALL
--  SELECT ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
--  (  SELECT  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
-- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 6';


  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_jobspage_arch ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, CURRENTPRIORITY text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_jobspage_arch ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, CURRENTPRIORITY text default '(0, 10000000)', EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default '(0, 10000000000)', NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_arch_daily ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);
t_stamp TIMESTAMP;

BEGIN


  -- Ver 1.0, 25th August 2016
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;


  t_stamp:= (CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - (RANGE_DAYS)::numeric;


  -- 20 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  stmt := 'SELECT '' WHERE MODIFICATIONTIME >  TO_DATE('|| TO_CHAR(t_stamp, '''''DD-MM-YYYY HH24:MI:SS''''') || ', ''''DD-MM-YYYY HH24:MI:SS'''') '' || '' ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| DBMS_ASSERT.ENQUOTE_LITERAL(EVENTSERVICE) ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  --DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(SHOW_RETRIED_PANDAIDS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT /*+ parallel 6*/ attr, attr_val, cnt  FROM
   (
   SELECT  ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  ) subq ';

-- UNION ALL
--  SELECT attr, TO_CHAR(pandaid), 1 FROM
--  (
--   SELECT /*+ parallel 6*/ ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
--  ) where rownum <= 1000
ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT /*+ parallel 6 */ attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT  attr, TO_CHAR(pandaid), 1 FROM
  ( SELECT /*+ parallel 6*/ ''PANDAID_RETRIED'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions || ' AND RETRIAL = ''Y'' ORDER BY PANDAID )
 ) subq ';

ELSE
 stmt := '';
END IF;

--  UNION ALL
--  SELECT  ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
--  (  SELECT /*+ parallel 6*/  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
-- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  --EXECUTE IMMEDIATE 'ALTER SESSION FORCE PARALLEL QUERY parallel 6';
  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  --EXECUTE IMMEDIATE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  --EXECUTE IMMEDIATE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';
  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_jobspage_arch_daily ( RANGE_DAYS text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_jobspage_arch_daily ( RANGE_DAYS text default '10', WITH_RETRIALS text default 'N', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.query_jobspage_arch_partition ( PARTITION_NAME text, WITH_RETRIALS text default 'Y', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default '(0, 10000000000)', NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
TYPE search_list IS VARRAY(14) OF varchar(250);
TYPE variable_list IS VARRAY(14) OF varchar(20);
slist search_list;
varlist variable_list;
where_conditions varchar(2000);
str_attr_stmt varchar(2000);
stmt varchar(32000);
-- t_stamp TIMESTAMP;
BEGIN


  -- Ver 1.0, 25th August 2016
  -- Editted 23 Sept
  -- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure against SQL injection. For the NUMBER input use TO_NUMBER function as protection
  -- Note:  "MODIFICATIONTIME > SYS_EXTRACT_UTC(SYSTIMESTAMP) - TO_NUMBER(RANGE_DAYS)" is used because the modification time is in UTC
  -- Array of columns that are of type VARCHAR2 are wildcard searchable
  slist := search_list(COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,PRODUSERNAME,
              ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE);

  varlist := variable_list('COMPUTINGSITE','JOBSTATUS','WORKINGGROUP','PRODSOURCELABEL','TRANSFORMATION','INPUTFILETYPE','CLOUD','NUCLEUS','PRODUSERNAME',
              'ATLASRELEASE','INPUTFILEPROJECT','PROCESSINGTYPE','JOBSUBSTATUS','HOMEPACKAGE');

  -- Free search is allowed on the sting attributes by replacing all '*' with '%'.
  -- Below the statemnet is build depending on where the like operator is needed. Otherwise '=' is used for performance reasons.
  FOR i in 1 .. slist.count LOOP
    IF position('*' in slist(i)) > 0 then
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND UPPER('|| varlist(i) ||') like UPPER('''|| DBMS_ASSERT.ENQUOTE_LITERAL(replace(slist(i),'*','%')) || ''')'','''')';
    ELSE
      str_attr_stmt := str_attr_stmt || ' || NVL2(:'|| varlist(i) ||','' AND '|| varlist(i) ||' = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(slist(i)) || ''''','''')';
    END IF;
  END LOOP;




  -- 20 filtering conditions can be put in place now
  -- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
  stmt := 'SELECT '' PARTITION('|| DBMS_ASSERT.ENQUOTE_NAME(PARTITION_NAME) ||') WHERE '' || '' 1=1 ''
	|| CASE WHEN :WITH_RETRIALS = ''N'' THEN NVL2( :WITH_RETRIALS , '' AND RETRIAL = ''' || DBMS_ASSERT.ENQUOTE_LITERAL(WITH_RETRIALS) ||''''', '''') ELSE '' '' END
	|| NVL2(:ATTEMPTNR,'' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ||''', '''' )
  	|| NVL2(:EVENTSERVICE, '' AND EVENTSERVICE = '|| (EVENTSERVICE)::numeric ::varchar ||''','''')
	|| NVL2(:JEDITASKID,'' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT >= '|| (SUBSTR(MINRAMCOUNT, INSTR(MINRAMCOUNT, '(', 1, 1)+1,  INSTR(MINRAMCOUNT, ',', 1, 1) -INSTR(MINRAMCOUNT, '(', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:MINRAMCOUNT,'' AND MINRAMCOUNT <= '|| (SUBSTR(MINRAMCOUNT, INSTR(MINRAMCOUNT, ',', 1, 1)+1,  INSTR(MINRAMCOUNT, ')', 1, 1) -INSTR(MINRAMCOUNT, ',', 1, 1) -1 ))::numeric ::varchar ||''', '''' )
	|| NVL2(:REQID,'' AND REQID = '|| (REQID)::numeric ::varchar ||''', '''' )
	  '|| str_attr_stmt ||'
	|| NVL2(:BROKERAGEERRORCODE,'' AND BROKERAGEERRORCODE) = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(BROKERAGEERRORCODE) ||''''', '''' )
	|| NVL2(:DDMERRORCODE,'' AND DDMERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(DDMERRORCODE) ||''''', '''' )
	|| NVL2(:EXEERRORCODE,'' AND EXEERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(EXEERRORCODE) ||''''', '''' )
	|| NVL2(:JOBDISPATCHERERRORCODE,'' AND JOBDISPATCHERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(JOBDISPATCHERERRORCODE) ||''''', '''' )
	|| NVL2(:PILOTERRORCODE,'' AND PILOTERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(PILOTERRORCODE) ||''''', '''' )
	|| NVL2(:SUPERRORCODE,'' AND SUPERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(SUPERRORCODE) ||''''', '''' )
	|| NVL2(:TASKBUFFERERRORCODE,'' AND TASKBUFFERERRORCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TASKBUFFERERRORCODE) ||''''', '''' )
	|| NVL2(:TRANSEXITCODE,'' AND TRANSEXITCODE = '''|| DBMS_ASSERT.ENQUOTE_LITERAL(TRANSEXITCODE) ||''''', '''' )
  FROM dual';

  --DBMS_OUTPUT.put_line (stmt);
  --DBMS_OUTPUT.put_line ('==========================');
  EXECUTE stmt  INTO STRICT where_conditions using WITH_RETRIALS, WITH_RETRIALS, ATTEMPTNR, EVENTSERVICE, JEDITASKID, MINRAMCOUNT, MINRAMCOUNT, REQID,
                                                      COMPUTINGSITE,JOBSTATUS,WORKINGGROUP,PRODSOURCELABEL,TRANSFORMATION,INPUTFILETYPE,CLOUD,NUCLEUS,
                                                      PRODUSERNAME,ATLASRELEASE,INPUTFILEPROJECT,PROCESSINGTYPE,JOBSUBSTATUS,HOMEPACKAGE,
						BROKERAGEERRORCODE, DDMERRORCODE, EXEERRORCODE, JOBDISPATCHERERRORCODE, PILOTERRORCODE, SUPERRORCODE, TASKBUFFERERRORCODE, TRANSEXITCODE;
  -- DBMS_OUTPUT.put_line (where_conditions);
  -- Compose the complete SQL statement
IF upper(SHOW_RETRIED_PANDAIDS) = 'N' OR (upper(SHOW_RETRIED_PANDAIDS) = 'N' AND upper(SHOW_RETRIED_PANDAIDS) = 'N' )THEN

  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT /* + parallel 4 */
 attr, attr_val, cnt  FROM
   (
   SELECT  ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT attr, TO_CHAR(pandaid), 1 FROM
  (
   SELECT ''PANDAID'' as attr, pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc
  ) where rownum <= 1000
 ) subq ';



ELSIF ( upper(WITH_RETRIALS) = 'Y' AND upper(SHOW_RETRIED_PANDAIDS) = 'Y' ) THEN

  -- Add to the result the PANDAIDs of the retried jobs. Their attribute name is 'PANDAID_RETRIED'
  stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
  (
    SELECT /* + parallel 4 */
 attr, attr_val, cnt  FROM
   (
   SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATLASRELEASE
   UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY ATTEMPTNR
   UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY COMPUTINGSITE
   UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY CLOUD
   UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY EVENTSERVICE
   UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY HOMEPACKAGE
   UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
   UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY INPUTFILETYPE
   UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH'|| where_conditions ||' GROUP BY JEDITASKID
   UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSTATUS
   UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY JOBSUBSTATUS
   UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY MINRAMCOUNT
   UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY NUCLEUS
   UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PROCESSINGTYPE
   UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODSOURCELABEL
   UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY PRODUSERNAME
   UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY REQID
   UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY TRANSFORMATION
   UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' GROUP BY WORKINGGROUP
   UNION ALL SELECT ''ErrorCode'' ,''Brokerage:'' || BROKERAGEERRORCODE, count(BROKERAGEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND  BROKERAGEERRORCODE is not null GROUP by BROKERAGEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''DDM:'' || DDMERRORCODE, count(DDMERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND DDMERRORCODE is not null GROUP by DDMERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Exe:'' || EXEERRORCODE, count(EXEERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND EXEERRORCODE is not null GROUP by EXEERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Jobdispatcher:'' || JOBDISPATCHERERRORCODE, count(JOBDISPATCHERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND JOBDISPATCHERERRORCODE is not null GROUP by JOBDISPATCHERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Pilot:'' || PILOTERRORCODE, count(PILOTERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND PILOTERRORCODE is not null GROUP by PILOTERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Sup:'' || SUPERRORCODE, count(SUPERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND SUPERRORCODE is not null GROUP by SUPERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Taskbuffer:'' || TASKBUFFERERRORCODE, count(TASKBUFFERERRORCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND TASKBUFFERERRORCODE is not null GROUP by TASKBUFFERERRORCODE
   UNION ALL SELECT ''ErrorCode'' ,''Transformation:'' || TRANSEXITCODE, count(TRANSEXITCODE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND (TRANSEXITCODE is not null AND TRANSEXITCODE> 0) GROUP by TRANSEXITCODE
   ) where attr_val IS NOT NULL
  UNION ALL
  SELECT ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
  (  SELECT  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
 ) subq ';

ELSE
 stmt := '';
END IF;

--  UNION ALL
--  SELECT  ''PANDAID'' as attr, TO_CHAR(pandaid), 1 FROM
--  (  SELECT /*+ parallel 4*/  pandaid FROM doma_pandabigmon.PANDAMON_JOBSPAGE_ARCH '|| where_conditions ||' AND RETRIAL = ''N'' ORDER BY MODIFICATIONTIME desc  ) where rownum <= 1000
 -- DBMS_OUTPUT.put_line (stmt);
  -- Parallelism Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 4';


  EXECUTE stmt BULK COLLECT INTO STRICT coll;

  -- Settings on session level
  EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
  EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

  RETURN coll;
END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_jobspage_arch_partition ( PARTITION_NAME text, WITH_RETRIALS text, SHOW_RETRIED_PANDAIDS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text, BROKERAGEERRORCODE text, DDMERRORCODE text, EXEERRORCODE text, JOBDISPATCHERERRORCODE text, PILOTERRORCODE text, SUPERRORCODE text, TASKBUFFERERRORCODE text, TRANSEXITCODE text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_jobspage_arch_partition ( PARTITION_NAME text, WITH_RETRIALS text default 'Y', SHOW_RETRIED_PANDAIDS text default 'N', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default '(0, 10000000000)', NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL, BROKERAGEERRORCODE text default NULL, DDMERRORCODE text default NULL, EXEERRORCODE text default NULL, JOBDISPATCHERERRORCODE text default NULL, PILOTERRORCODE text default NULL, SUPERRORCODE text default NULL, TASKBUFFERERRORCODE text default NULL, TRANSEXITCODE text default NULL) FROM PUBLIC;



CREATE OR REPLACE FUNCTION doma_pandabigmon.query_pandamon_jobspage ( RANGE_DAYS text default '1', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL) RETURNS PANDAMON_JOBSPAGE_COLL AS $body$
DECLARE


coll PANDAMON_JOBSPAGE_COLL:= PANDAMON_JOBSPAGE_COLL();
where_conditions varchar(2000);
stmt varchar(32000);


BEGIN


-- Note: use of DBMS_ASSERT.ENQUOTE_LITERAL() to enquote each function argument as a measure agains SQL injection. For the NUMBER input use TO_NUMBER function as protection
-- to check that the "RANGE_DAYS" is positive ?
where_conditions := ' WHERE MODIFICATIONTIME <= SYSDATE-'|| (RANGE_DAYS)::numeric ::varchar;

-- 20 filtering conditions can be put in place now
-- Note: TO_NUMBER is used in order to validate the input which must be a number for certain arguments
SELECT ' WHERE MODIFICATIONTIME > sysdate - '|| (RANGE_DAYS)::numeric ::varchar || ' '
	|| (CASE WHEN (ATLASRELEASE IS NOT NULL AND ATLASRELEASE::text <> '') THEN ' AND ATLASRELEASE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(ATLASRELEASE) ELSE '' END)
	|| (CASE WHEN (ATTEMPTNR IS NOT NULL AND ATTEMPTNR::text <> '') THEN ' AND ATTEMPTNR = '|| (ATTEMPTNR)::numeric ::varchar ELSE ''  END)
	|| (CASE WHEN (COMPUTINGSITE IS NOT NULL AND COMPUTINGSITE::text <> '') THEN ' AND COMPUTINGSITE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(COMPUTINGSITE) ELSE '' END)
 	|| (CASE WHEN (CLOUD IS NOT NULL AND CLOUD::text <> '') THEN ' AND CLOUD = ' || DBMS_ASSERT.ENQUOTE_LITERAL(CLOUD) ELSE '' END)
 	|| (CASE WHEN (EVENTSERVICE IS NOT NULL AND EVENTSERVICE::text <> '') THEN ' AND EVENTSERVICE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(EVENTSERVICE) ELSE '' END)
 	|| (CASE WHEN (HOMEPACKAGE IS NOT NULL AND HOMEPACKAGE::text <> '') THEN ' AND HOMEPACKAGE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(HOMEPACKAGE) ELSE '' END)
	|| (CASE WHEN (INPUTFILEPROJECT IS NOT NULL AND INPUTFILEPROJECT::text <> '') THEN ' AND INPUTFILEPROJECT = ' || DBMS_ASSERT.ENQUOTE_LITERAL(INPUTFILEPROJECT) ELSE '' END)
	|| (CASE WHEN (INPUTFILETYPE IS NOT NULL AND INPUTFILETYPE::text <> '') THEN ' AND INPUTFILETYPE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(INPUTFILETYPE) ELSE '' END)
	|| (CASE WHEN (JEDITASKID IS NOT NULL AND JEDITASKID::text <> '') THEN ' AND JEDITASKID = '|| (JEDITASKID)::numeric ::varchar ELSE ''  END)
 	|| (CASE WHEN (JOBSTATUS IS NOT NULL AND JOBSTATUS::text <> '') THEN ' AND JOBSTATUS = ' || DBMS_ASSERT.ENQUOTE_LITERAL(JOBSTATUS) ELSE '' END)
	|| (CASE WHEN (JOBSUBSTATUS IS NOT NULL AND JOBSUBSTATUS::text <> '') THEN ' AND JOBSUBSTATUS = ' || DBMS_ASSERT.ENQUOTE_LITERAL(JOBSUBSTATUS) ELSE '' END)
	|| (CASE WHEN (MINRAMCOUNT IS NOT NULL AND MINRAMCOUNT::text <> '') THEN ' AND MINRAMCOUNT = '|| (MINRAMCOUNT)::numeric ::varchar ELSE ''  END)
 	|| (CASE WHEN (NUCLEUS IS NOT NULL AND NUCLEUS::text <> '') THEN ' AND NUCLEUS = ' || DBMS_ASSERT.ENQUOTE_LITERAL(NUCLEUS) ELSE '' END)
	|| (CASE WHEN (PROCESSINGTYPE IS NOT NULL AND PROCESSINGTYPE::text <> '') THEN ' AND PROCESSINGTYPE = ' || DBMS_ASSERT.ENQUOTE_LITERAL(PROCESSINGTYPE) ELSE '' END)
	|| (CASE WHEN (PRODSOURCELABEL IS NOT NULL AND PRODSOURCELABEL::text <> '') THEN ' AND PRODSOURCELABEL = ' || DBMS_ASSERT.ENQUOTE_LITERAL(PRODSOURCELABEL) ELSE '' END)
	|| (CASE WHEN (PRODUSERNAME IS NOT NULL AND PRODUSERNAME::text <> '') THEN ' AND PRODUSERNAME = ' || DBMS_ASSERT.ENQUOTE_LITERAL(PRODUSERNAME) ELSE '' END)
	|| (CASE WHEN (REQID IS NOT NULL AND REQID::text <> '') THEN ' AND REQID = '|| (REQID)::numeric ::varchar ELSE ''  END)
	|| (CASE WHEN (TRANSFORMATION IS NOT NULL AND TRANSFORMATION::text <> '') THEN ' AND TRANSFORMATION = ' || DBMS_ASSERT.ENQUOTE_LITERAL(TRANSFORMATION) ELSE '' END)
	|| (CASE WHEN (WORKINGGROUP IS NOT NULL AND WORKINGGROUP::text <> '') THEN ' AND WORKINGGROUP = ' || DBMS_ASSERT.ENQUOTE_LITERAL(WORKINGGROUP) ELSE '' END)
INTO STRICT where_conditions;




-- compose the complete SQL statement
stmt:= 'SELECT doma_pandabigmon.PANDAMON_JOBSPAGE_OBJ( subq.attr, subq.attr_val, subq.cnt)  FROM
(
  SELECT attr, attr_val, cnt  FROM
 (
 SELECT ''ATLASRELEASE'' as attr , ATLASRELEASE as attr_val , count(ATLASRELEASE) as cnt FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATLASRELEASE
 UNION ALL SELECT ''ATTEMPTNR'', TO_CHAR(ATTEMPTNR), count(ATTEMPTNR) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY ATTEMPTNR
 UNION ALL SELECT ''COMPUTINGSITE'', COMPUTINGSITE , count(COMPUTINGSITE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY COMPUTINGSITE
 UNION ALL SELECT ''CLOUD'', CLOUD , count(CLOUD) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY CLOUD
 UNION ALL SELECT ''EVENTSERVICE'', to_char(EVENTSERVICE), count(EVENTSERVICE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY EVENTSERVICE
 UNION ALL SELECT ''HOMEPACKAGE'', HOMEPACKAGE , count(HOMEPACKAGE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY HOMEPACKAGE
 UNION ALL SELECT ''INPUTFILEPROJECT'', INPUTFILEPROJECT, count(INPUTFILEPROJECT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILEPROJECT
 UNION ALL SELECT ''INPUTFILETYPE'', INPUTFILETYPE, count(INPUTFILETYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY INPUTFILETYPE
 UNION ALL SELECT ''JEDITASKID'', to_char(JEDITASKID), count(JEDITASKID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JEDITASKID
 UNION ALL SELECT ''JOBSTATUS'', JOBSTATUS, count(JOBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSTATUS
 UNION ALL SELECT ''JOBSUBSTATUS'', JOBSUBSTATUS, count(JOBSUBSTATUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY JOBSUBSTATUS
 UNION ALL SELECT ''MINRAMCOUNT'', to_char(MINRAMCOUNT), count(MINRAMCOUNT) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY MINRAMCOUNT
 UNION ALL SELECT ''NUCLEUS'', NUCLEUS, count(NUCLEUS) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY NUCLEUS
 UNION ALL SELECT ''PROCESSINGTYPE'', PROCESSINGTYPE, count(PROCESSINGTYPE) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PROCESSINGTYPE
 UNION ALL SELECT ''PRODSOURCELABEL'', PRODSOURCELABEL, count(PRODSOURCELABEL) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODSOURCELABEL
 UNION ALL SELECT ''PRODUSERNAME'', PRODUSERNAME, count(PRODUSERNAME) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY PRODUSERNAME
 UNION ALL SELECT ''REQID'', to_char(REQID), count(REQID) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY REQID
 UNION ALL SELECT ''TRANSFORMATION'', TRANSFORMATION, count(TRANSFORMATION) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY TRANSFORMATION
 UNION ALL SELECT ''WORKINGGROUP'', WORKINGGROUP, count(WORKINGGROUP) FROM doma_pandabigmon.PANDAMON_JOBSPAGE '|| where_conditions ||' GROUP BY WORKINGGROUP
 ) where attr_val IS NOT NULL
) subq';


-- DBMS_OUTPUT.put_line (where_conditions);
-- DBMS_OUTPUT.put_line (stmt);
-- Parallelism Settings on session level
EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = TRUE';
EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 4';


EXECUTE stmt BULK COLLECT INTO STRICT coll;

-- Settings on session level
EXECUTE 'ALTER SESSION SET PARALLEL_FORCE_LOCAL = FALSE';
EXECUTE 'ALTER SESSION FORCE PARALLEL QUERY parallel 1';

RETURN coll;

END;
$body$
LANGUAGE PLPGSQL
;
ALTER FUNCTION query_pandamon_jobspage ( RANGE_DAYS text, ATLASRELEASE text, ATTEMPTNR text, COMPUTINGSITE text, CLOUD text, EVENTSERVICE text, HOMEPACKAGE text, INPUTFILEPROJECT text, INPUTFILETYPE text, JEDITASKID text, JOBSTATUS text, JOBSUBSTATUS text, MINRAMCOUNT text, NUCLEUS text, PROCESSINGTYPE text, PRODSOURCELABEL text, PRODUSERNAME text, REQID text, TRANSFORMATION text, WORKINGGROUP text) OWNER TO panda;
-- REVOKE ALL ON FUNCTION doma_pandabigmon.query_pandamon_jobspage ( RANGE_DAYS text default '1', ATLASRELEASE text default NULL, ATTEMPTNR text default NULL, COMPUTINGSITE text default NULL, CLOUD text default NULL, EVENTSERVICE text default NULL, HOMEPACKAGE text default NULL, INPUTFILEPROJECT text default NULL, INPUTFILETYPE text default NULL, JEDITASKID text default NULL, JOBSTATUS text default NULL, JOBSUBSTATUS text default NULL, MINRAMCOUNT text default NULL, NUCLEUS text default NULL, PROCESSINGTYPE text default NULL, PRODSOURCELABEL text default NULL, PRODUSERNAME text default NULL, REQID text default NULL, TRANSFORMATION text default NULL, WORKINGGROUP text default NULL) FROM PUBLIC;

